<script>
/**
 * aep-dataLayer v2.2 (barcode-first)
 * Enhanced ecommerce tracking for Shopify cu item_id = barcode -> sku -> product_id
 * Sleek theme compatible (covers JSON and FormData /cart/add flows)
 */
(function() {

  class aep_dataLayer {
    constructor() {
      window.dataLayer = window.dataLayer || [];
      this.eventPrefix = 'aep_';

      /* ===== Vizibilitate / config ===== */
      this.dataSchema = {
        ecommerce: { show: true },
        dynamicRemarketing: { show: true, business_vertical: 'retail' }
      };

      /* ===== Selectoare utile (poți personaliza) ===== */
      this.addToWishListSelectors = {
        'addWishListIcon': '',
        'gridItemSelector': '',
        'productLinkSelector': 'a[href*="/products/"]'
      };
      this.quickViewSelector = {
        'quickViewElement': '',
        'gridItemSelector': '',
        'productLinkSelector': 'a[href*="/products/"]'
      };
      this.miniCartButton = [ 'a[href="/cart"]' ];
      this.miniCartAppersOn = 'click';
      this.shopifyDirectCheckoutButton = [ '.shopify-payment-button' ];
      this.isAddToCartRedirect = false;
      this.isAjaxCartIncrementDecrement = true;

      /* ===== Date Shopify ===== */
      this.cart       = {{ cart | json }};
      this.countryCode= "{{ shop.address.country_code }}";
      this.storeURL   = "{{ shop.secure_url }}";
      try { localStorage.setItem('shopCountryCode', this.countryCode); } catch(e){}

      this.customerData = { isLoggedIn:false, totalSpent:0, ordersCount:0 };
      {% if customer %}
        this.customerData.isLoggedIn = true;
        this.customerData.totalSpent = {{ customer.total_spent | divided_by: 100.0 }};
        this.customerData.ordersCount= {{ customer.orders_count | default: 0 }};
      {% endif %}

      this.pageType = this.getPageType();

      /* ===== Cache barcode pe variant_id ===== */
      this.variantBarcodeCache = new Map();
      this.variantMeta = {};

      /* Seed din CART (acoperă view_cart + schimbări cantitate) */
      {% for item in cart.items %}
        this.variantMeta["{{ item.variant_id }}"] = {
          barcode: {{ item.variant.barcode | json }}
        };
        {% if item.variant.barcode != blank %}
          this.variantBarcodeCache.set("{{ item.variant_id }}", String({{ item.variant.barcode | json }}));
        {% endif %}
      {% endfor %}

      /* Seed din COLECȚIE (acoperă quick add) */
      {% if template contains 'collection' %}
        {% for product in collection.products %}
          this.variantMeta["{{ product.selected_or_first_available_variant.id }}"] = {
            barcode: {{ product.selected_or_first_available_variant.barcode | json }}
          };
          {% if product.selected_or_first_available_variant.barcode != blank %}
            this.variantBarcodeCache.set("{{ product.selected_or_first_available_variant.id }}", String({{ product.selected_or_first_available_variant.barcode | json }}));
          {% endif %}
        {% endfor %}
      {% endif %}

      /* Seed din PDP (ideal: toate variantele) */
      {% if template contains 'product' %}
        {% for v in product.variants %}
          this.variantMeta["{{ v.id }}"] = { barcode: {{ v.barcode | json }} };
          {% if v.barcode != blank %}
            this.variantBarcodeCache.set("{{ v.id }}", String({{ v.barcode | json }}));
          {% endif %}
        {% endfor %}
      {% endif %}

      this.collectData();
      this.itemsList = [];
    }

    /* ===== Helpers ===== */
    getBarcodeByVariantId(variantId){
      if(!variantId) return null;
      const key = String(variantId);
      if(this.variantBarcodeCache.has(key)) return this.variantBarcodeCache.get(key); // poate fi '' dacă lipsește

      const seeded = this.variantMeta[key] && this.variantMeta[key].barcode;
      if(seeded) {
        const bc = String(seeded);
        this.variantBarcodeCache.set(key, bc);
        return bc;
      }
      // Prefetch non-blocant din /variants/{id}.js
      fetch(`/variants/${variantId}.js`)
        .then(r => r.ok ? r.json() : null)
        .then(v => {
          const bc = v && v.barcode ? String(v.barcode) : '';
          this.variantBarcodeCache.set(key, bc);
        })
        .catch(()=> this.variantBarcodeCache.set(key, ''));
      return null;
    }

    enrichItemsWithMeta(items){
      return (items || []).map(it => {
        const vId = it.variant_id || it.id || (it.variant && it.variant.id);
        const enriched = {...it};
        if(!enriched.barcode){
          const fromSeed = (vId && this.variantMeta[String(vId)] && this.variantMeta[String(vId)].barcode) || null;
          enriched.barcode = fromSeed || this.getBarcodeByVariantId(vId) || null;
        }
        return enriched;
      });
    }

    getPageType() {
      {% if template contains 'product' %}   return { dynx:'offerdetail', ecomm:'product' };
      {% elsif template contains 'collection' %} return { dynx:'category', ecomm:'category' };
      {% elsif template contains 'cart' %}    return { dynx:'cart', ecomm:'cart' };
      {% elsif template contains 'search' %}  return { dynx:'searchresults', ecomm:'searchresults' };
      {% elsif template == 'index' %}         return { dynx:'home', ecomm:'home' };
      {% else %}                              return { dynx:'other', ecomm:'other' };
      {% endif %}
    }

    updateCart() {
      fetch("/cart.js").then(r => r.json()).then(d => { this.cart = d; });
    }

    debounce(delay) {
      let t; return (fn)=>{ clearTimeout(t); t = setTimeout(fn, delay); };
    }

    eventConsole(name, data) {
      const css1='background: DarkMagenta; color:#fff; border-radius:3px 0 0 3px; padding:3px 4px;';
      const css2='background: DarkOrchid; color:#fff; border-radius:0 3px 3px 0; padding:3px 4px;';
      console.log('%cGTM DataLayer Event:%c'+name, css1, css2, data);
    }

    /* ===== Bootstrap colectare ===== */
    collectData() {
      this.customerDataLayer();
      this.ajaxRequestData();
      this.searchPageData();
      this.miniCartData();

      {% if template contains 'cart' %}    this.viewCartPageData(); {% endif %}
      {% if template contains 'product' %} this.productSinglePage(); {% endif %}
      {% if template contains 'collection' %} this.collectionsPageData(); {% endif %}

      this.addToWishListData();
      this.quickViewData();
      this.selectItemData();
      this.formData();
      this.phoneClickData();
      this.emailClickData();
      this.loginRegisterData();
    }

    /* ===== Customer data ===== */
    customerDataLayer() {
      const currentUser = {};
      {% if customer %}
        currentUser.id = {{ customer.id }};
        currentUser.first_name = "{{ customer.first_name }}";
        currentUser.last_name  = "{{ customer.last_name }}";
        currentUser.full_name  = "{{ customer.name }}";
        currentUser.email      = "{{ customer.email }}";
        currentUser.phone      = "{{ customer.default_address.phone }}";
        {% if customer.default_address %}
          currentUser.address = {
            address_summary: "{{ customer.default_address.summary }}",
            address1: "{{ customer.default_address.address1 }}",
            address2: "{{ customer.default_address.address2 }}",
            city: "{{ customer.default_address.city }}",
            street: "{{ customer.default_address.street }}",
            zip: "{{ customer.default_address.zip }}",
            company: "{{ customer.default_address.company }}",
            country: "{{ customer.default_address.country.name }}",
            countryCode: "{{ customer.default_address.country_code }}",
            province: "{{ customer.default_address.province }}"
          };
        {% endif %}
      {% endif %}

      if (currentUser.email) currentUser.hash_email = "{{ customer.email | sha256 }}";
      if (currentUser.phone) currentUser.hash_phone = "{{ customer.phone | sha256 }}";

      window.dataLayer = window.dataLayer || [];
      dataLayer.push({ customer: currentUser });
    }

    /* ===== AJAX & form flows (Add to Cart + Search + Change) ===== */
    ajaxRequestData() {
      const self = this;

      /* A) Asigură hidden inputs pe toate formularele /cart/add (flow nativ) */
      document.querySelectorAll('form[action*="/cart/add"]').forEach((form)=>{
        const ensure = (name)=>{
          if (!form.querySelector(`input[name="${name}"]`)) {
            const hi = document.createElement('input');
            hi.type='hidden'; hi.name=name; hi.value='';
            form.appendChild(hi);
          }
        };
        ensure('properties[aep_item_id]');
        ensure('properties[aep_barcode]');

        const variantInput = form.querySelector('[name="id"], [name="variant"]');
        const sync = ()=>{
          const vid = variantInput && (variantInput.value || variantInput.getAttribute('value'));
          const bc  = self.getBarcodeByVariantId(vid) || '';
          form.querySelector('input[name="properties[aep_item_id]"]').value = bc;
          form.querySelector('input[name="properties[aep_barcode]"]').value  = bc;
        };
        if (variantInput) { variantInput.addEventListener('change', sync); sync(); }
      });

      /* B) Optional: redirecționare post nativă (nu schimbă obiectivul nostru) */
      if(this.isAddToCartRedirect) {
        document.addEventListener('submit', function(event) {
          const f = event.target.closest('form[action="/cart/add"]');
          if(!f) return;
          event.preventDefault();
          const fd = new FormData(f);
          fetch(window.Shopify.routes.root + 'cart/add.js', { method:'POST', body:fd })
            .then(()=>{ window.location.href = "{{ routes.cart_url }}"; })
            .catch(console.error);
        });
      }

      /* C) Override fetch ca să injectăm PROPERTIES la /cart/add (FormData + JSON) */
      const originalFetch = window.fetch;
      const debounce = this.debounce(800);

      window.fetch = async (...args) => {
        try {
          const req = args[0];
          const init = args[1] || {};
          const url  = (typeof req === 'string') ? req : (req && req.url);
          const method = (init.method || (req && req.method) || 'GET').toUpperCase();

          // ---- INJECTION pe /cart/add ----
          if (url && url.includes('/cart/add') && method === 'POST') {
            // FormData body
            if (init.body instanceof FormData) {
              const fd = init.body;
              const vid = fd.get('id') || fd.get('variant') || fd.get('items[0][id]');
              const bc  = this.getBarcodeByVariantId(vid) || '';
              if (!fd.has('properties[aep_item_id]')) fd.append('properties[aep_item_id]', bc);
              if (!fd.has('properties[aep_barcode]'))  fd.append('properties[aep_barcode]',  bc);
            }
            // JSON body
            else if (typeof init.body === 'string' && (init.headers && /application\/json/i.test(init.headers['Content-Type'] || init.headers['content-type'] || ''))) {
              try {
                const payload = JSON.parse(init.body);
                // shape 1: { id, quantity, properties? }
                if (payload && payload.id) {
                  const bc = this.getBarcodeByVariantId(payload.id) || '';
                  payload.properties = Object.assign({}, payload.properties, { aep_item_id: bc, aep_barcode: bc });
                }
                // shape 2: { items:[ {id, quantity, properties?} ] }
                if (payload && Array.isArray(payload.items)) {
                  payload.items = payload.items.map(item => {
                    const vid = item.id || item.variant_id;
                    const bc  = this.getBarcodeByVariantId(vid) || '';
                    return Object.assign({}, item, {
                      properties: Object.assign({}, item.properties, { aep_item_id: bc, aep_barcode: bc })
                    });
                  });
                }
                init.body = JSON.stringify(payload);
                args[1] = init;
              } catch(e) {/* lăsăm netamperat dacă nu e JSON valid */}
            }
          }
          // ---- END INJECTION ----

          const response = await originalFetch(...args);

          // Handlers existenți (search/add/change) — îmbogățesc cu barcode și împing în DL
          if (response.ok) {
            const clone = response.clone();
            const requestURL = url || (args[0] && args[0].url) || '';

            // Search autosuggest
            if(/.*\/search\/?.*\?.*q=.+/.test(requestURL) && !requestURL.includes('&requestFrom=uldt')) {
              const qs = requestURL.split('?')[1]; const urlParams = new URLSearchParams(qs);
              const search_term = urlParams.get("q");
              debounce(()=> {
                fetch(`${self.storeURL}/search/suggest.json?q=${search_term}&resources[type]=product&requestFrom=uldt`)
                  .then(res=>res.json())
                  .then(data=>{
                    const prods = data.resources?.results?.products || [];
                    if(!prods.length) { self.ecommerceDataLayer('search', {search_term, items: []}); return; }
                    const reqs = prods.map(p => fetch(`${self.storeURL}/${p.url.split('?')[0]}.js`).then(r=>r.json()));
                    Promise.all(reqs).then(list=>{
                      const items = list.map(p => ({
                        product_id: p.id,
                        product_title: p.title,
                        variant_id: p.variants[0].id,
                        variant_title: p.variants[0].title,
                        vendor: p.vendor,
                        total_discount: 0,
                        final_price: p.price_min,
                        product_type: p.type,
                        quantity: 1,
                        sku: p.variants[0].sku,
                        barcode: p.variants[0].barcode || null
                      }));
                      self.ecommerceDataLayer('search', {search_term, items});
                    });
                  });
              });
            }
            // Add to cart
            else if (requestURL.includes("/cart/add")) {
              const text = await clone.text();
              let data; try { data = JSON.parse(text); } catch(e){ data = null; }
              if (data) {
                if(data.items && Array.isArray(data.items)) {
                  const enriched = self.enrichItemsWithMeta(data.items);
                  enriched.forEach(it => self.ecommerceDataLayer('add_to_cart', {items:[it]}));
                } else {
                  const enriched = self.enrichItemsWithMeta([data]);
                  self.ecommerceDataLayer('add_to_cart', {items: enriched});
                }
                self.updateCart();
              }
            }
            // Change / update cart
            else if (requestURL.includes("/cart/change") || requestURL.includes("/cart/update")) {
              const text = await clone.text();
              let newCart; try { newCart = JSON.parse(text); } catch(e){ newCart = null; }
              if (newCart) {
                let newCartItems = newCart.items;
                let oldCartItems = self.cart.items;
                for (let i=0;i<oldCartItems.length;i++){
                  let item = oldCartItems[i];
                  let newItem = newCartItems.find(n => n.id === item.id);
                  if(newItem){
                    if(newItem.quantity > item.quantity){
                      let quantity = (newItem.quantity - item.quantity);
                      let updated = self.enrichItemsWithMeta([{...item, quantity}])[0];
                      self.ecommerceDataLayer('add_to_cart', {items:[updated]}); self.updateCart();
                    } else if(newItem.quantity < item.quantity){
                      let quantity = (item.quantity - newItem.quantity);
                      let updated = self.enrichItemsWithMeta([{...item, quantity}])[0];
                      self.ecommerceDataLayer('remove_from_cart', {items:[updated]}); self.updateCart();
                    }
                  } else {
                    let removed = self.enrichItemsWithMeta([item])[0];
                    self.ecommerceDataLayer('remove_from_cart', {items:[removed]}); self.updateCart();
                  }
                }
              }
            }
          }
          return response;
        } catch (e) {
          return originalFetch(...args);
        }
      };

      /* D) XHR fallback (rămâne, dar fetch acoperă Sleek în 99% din cazuri) */
      const OrigXHR = XMLHttpRequest;
      XMLHttpRequest = function() {
        const xhr = new OrigXHR();
        let requestURL='', reqMethod='GET';
        const origOpen = xhr.open, origSend = xhr.send;

        xhr.open = function(method, url){ requestURL=url; reqMethod=(method||'GET').toUpperCase(); return origOpen.apply(this, arguments); };
        xhr.send = function(data){
          xhr.addEventListener('load', ()=> {
            if (xhr.readyState===4 && xhr.status>=200 && xhr.status<400) {
              if(/.*\/search\/?.*\?.*q=.+/.test(requestURL) && !requestURL.includes('&requestFrom=uldt')) {
                const qs = requestURL.split('?')[1]; const urlParams = new URLSearchParams(qs);
                const search_term = urlParams.get("q");
                const debounce = self.debounce(800);
                debounce(()=> {
                  fetch(`${self.storeURL}/search/suggest.json?q=${search_term}&resources[type]=product&requestFrom=uldt`)
                    .then(res=>res.json())
                    .then(data=>{
                      const prods = data.resources?.results?.products || [];
                      if(!prods.length) { self.ecommerceDataLayer('search', {search_term, items: []}); return; }
                      const reqs = prods.map(p => fetch(`${self.storeURL}/${p.url.split('?')[0]}.js`).then(r=>r.json()));
                      Promise.all(reqs).then(list=>{
                        const items = list.map(p => ({
                          product_id: p.id,
                          product_title: p.title,
                          variant_id: p.variants[0].id,
                          variant_title: p.variants[0].title,
                          vendor: p.vendor,
                          total_discount: 0,
                          final_price: p.price_min,
                          product_type: p.type,
                          quantity: 1,
                          sku: p.variants[0].sku,
                          barcode: p.variants[0].barcode || null
                        }));
                        self.ecommerceDataLayer('search', {search_term, items});
                      });
                    });
                });
              } else if(requestURL.includes("/cart/add")) {
                let data; try{ data = JSON.parse(xhr.responseText); }catch(e){ data=null; }
                if(data){
                  if(data.items && Array.isArray(data.items)) {
                    const enriched = self.enrichItemsWithMeta(data.items);
                    enriched.forEach(it => self.ecommerceDataLayer('add_to_cart', {items:[it]}));
                  } else {
                    const enriched = self.enrichItemsWithMeta([data]);
                    self.ecommerceDataLayer('add_to_cart', {items: enriched});
                  }
                  self.updateCart();
                }
              } else if(requestURL.includes("/cart/change")) {
                let newCart; try{ newCart = JSON.parse(xhr.responseText); }catch(e){ newCart=null; }
                if(newCart){
                  const newItems = newCart.items;
                  const oldItems = self.cart.items;
                  for(let i=0;i<oldItems.length;i++){
                    let item = oldItems[i];
                    let ni = newItems.find(x => x.id === item.id);
                    if(ni){
                      if(ni.quantity > item.quantity){
                        let q=(ni.quantity-item.quantity);
                        let upd=self.enrichItemsWithMeta([{...item, quantity:q}])[0];
                        self.ecommerceDataLayer('add_to_cart', {items:[upd]}); self.updateCart();
                      } else if(ni.quantity < item.quantity){
                        let q=(item.quantity-ni.quantity);
                        let upd=self.enrichItemsWithMeta([{...item, quantity:q}])[0];
                        self.ecommerceDataLayer('remove_from_cart', {items:[upd]}); self.updateCart();
                      }
                    } else {
                      let removed=self.enrichItemsWithMeta([item])[0];
                      self.ecommerceDataLayer('remove_from_cart', {items:[removed]}); self.updateCart();
                    }
                  }
                }
              }
            }
          });
          return origSend.apply(this, arguments);
        };
        return xhr;
      };
    }

    /* ===== Search page ===== */
    searchPageData() {
      const self=this; const pageUrl=window.location.href;
      if(/.+\/search\?.*\&?q=.+/.test(pageUrl)) {
        const qs = pageUrl.split('?')[1]; const urlParams = new URLSearchParams(qs);
        const search_term = urlParams.get("q");
        fetch(`{{ shop.secure_url }}/search/suggest.json?q=${search_term}&resources[type]=product&requestFrom=uldt`)
          .then(res=>res.json())
          .then(data=>{
            const prods = data.resources?.results?.products || [];
            if(!prods.length){ self.ecommerceDataLayer('search', {search_term, items: []}); return; }
            const reqs = prods.map(p => fetch(`${self.storeURL}/${p.url.split('?')[0]}.js`).then(r=>r.json()));
            Promise.all(reqs).then(list=>{
              const items = list.map(p => ({
                product_id: p.id,
                product_title: p.title,
                variant_id: p.variants[0].id,
                variant_title: p.variants[0].title,
                vendor: p.vendor,
                total_discount: 0,
                final_price: p.price_min,
                product_type: p.type,
                quantity: 1,
                sku: p.variants[0].sku,
                barcode: p.variants[0].barcode || null
              }));
              self.ecommerceDataLayer('search', {search_term, items});
            });
          });
      }
    }

    /* ===== View Cart (mini + page) ===== */
    miniCartData() {
      if(!this.miniCartButton.length) return;
      const self=this;
      const ev = (this.miniCartAppersOn === 'hover') ? 'mouseenter' : this.miniCartAppersOn;
      this.miniCartButton.forEach((sel)=>{
        document.querySelectorAll(sel).forEach((btn)=>{
          btn.addEventListener(ev, ()=>{
            const enriched = self.enrichItemsWithMeta(self.cart.items || []);
            self.ecommerceDataLayer('view_cart', {...self.cart, items: enriched});
          });
        });
      });
    }

    viewCartPageData() {
      const enriched = this.enrichItemsWithMeta(this.cart.items || []);
      this.ecommerceDataLayer('view_cart', {...this.cart, items: enriched});

      if(!this.isAjaxCartIncrementDecrement){
        const self=this;
        document.addEventListener('pointerdown', (e)=>{
          const a = e.target.closest('a[href*="/cart/change?"]'); if(!a) return;
          const qs = a.getAttribute('href').split('?')[1]; const p = new URLSearchParams(qs);
          const newQ = +p.get('quantity'); const line = p.get('line'); const key = p.get('id');
          if(newQ && (line || key)){
            let item = line ? {...self.cart.items[line-1]} : self.cart.items.find(i => i.key === key);
            let evt = (newQ < item.quantity) ? 'remove_from_cart' : 'add_to_cart';
            let q = Math.abs(newQ - item.quantity); item['quantity'] = q;
            item = self.enrichItemsWithMeta([item])[0];
            self.ecommerceDataLayer(evt, {items:[item]});
          }
        });
      }
    }

    /* ===== PDP ===== */
    productSinglePage() {
      {% if template contains 'product' %}
      const item = {
        product_id: {{ product.id | json }},
        variant_id: {{ product.selected_or_first_available_variant.id }},
        product_title: {{ product.title | json }},
        line_level_total_discount: 0,
        vendor: {{ product.vendor | json }},
        sku: {{ product.selected_or_first_available_variant.sku | json }},
        barcode: {{ product.selected_or_first_available_variant.barcode | json }},
        product_type: {{ product.type | json }},
        item_list_id: {{ product.collections[0].id | json }},
        item_list_name: {{ product.collections[0].title | json }},
        {% if product.selected_or_first_available_variant.title != "Default Title" %} variant_title: {{ product.selected_or_first_available_variant.title | json }}, {% endif %}
        final_price: {{ product.selected_or_first_available_variant.price }},
        quantity: 1
      };
      const variants = {{ product.variants | json }};
      this.ecommerceDataLayer('view_item', {items:[item]});

      if(this.shopifyDirectCheckoutButton.length) {
        let self=this;
        document.addEventListener('pointerdown', (event)=>{
          let checkoutButton = event.target.closest(this.shopifyDirectCheckoutButton.join(', '));
          if(!checkoutButton) return;

          let checkoutForm = checkoutButton.closest('form[action*="/cart/add"]');
          if(!checkoutForm) return;

          let variant_id = null;
          let varInput = checkoutForm.querySelector('input[name="id"]');
          let varFromURL = new URLSearchParams(window.location.search).get('variant');
          let firstVarId = item.variant_id;
          if(varInput){ variant_id = parseInt(varInput.value); }
          else if(varFromURL){ variant_id = varFromURL; }
          else if(firstVarId){ variant_id = firstVarId; }

          if(variant_id){
            let quantity = 1;
            let formId = checkoutForm.getAttribute('id');
            if(formId){
              let qInput = document.querySelector('input[name="quantity"][form="'+formId+'"]');
              if(qInput) quantity = +qInput.value;
            }
            let v = variants.find(x => x.id === +variant_id);
            if(v && item){
              item['variant_id']   = variant_id;
              item['variant_title']= v.title;
              item['final_price']  = v.price;
              item['quantity']     = quantity;
              item['barcode']      = v.barcode || this.getBarcodeByVariantId(variant_id) || item['barcode'] || null;
              self.ecommerceDataLayer('add_to_cart', {items:[item]});
            }
          }
        });
      }
      {% endif %}
    }

    /* ===== Collection ===== */
    collectionsPageData() {
      var ecommerce = {
        'items': [
          {% for product in collection.products %}
          {
            'product_id': {{ product.id | json }},
            'variant_id': {{ product.selected_or_first_available_variant.id | json }},
            'vendor': {{ product.vendor | json }},
            'sku': {{ product.selected_or_first_available_variant.sku | json }},
            'barcode': {{ product.selected_or_first_available_variant.barcode | json }},
            'total_discount': 0,
            'variant_title': {{ product.selected_or_first_available_variant.title | json }},
            'product_title': {{ product.title | json }},
            'final_price': Number({{ product.price }}),
            'product_type': {{ product.type | json }},
            'item_list_id': {{ collection.id | json }},
            'item_list_name': {{ collection.title | json }},
            'url': {{ product.url | json }},
            'quantity': 1
          },
          {% endfor %}
        ]
      };
      this.itemsList = ecommerce.items;
      ecommerce['item_list_id']   = {{ collection.id | json }};
      ecommerce['item_list_name'] = {{ collection.title | json }};
      ecommerce.items = this.enrichItemsWithMeta(ecommerce.items);
      this.ecommerceDataLayer('view_item_list', ecommerce);
    }

    /* ===== Quick add / wishlist ===== */
    addToWishListData() {
      if(!(this.addToWishListSelectors && this.addToWishListSelectors.addWishListIcon)) return;
      const self=this;
      document.addEventListener('pointerdown', (event)=>{
        let target = event.target;
        if(!target.closest(self.addToWishListSelectors.addWishListIcon)) return;

        let requestURL;
        const pageURL = window.location.href.replace(/\?.+/, '');
        if(/\/products\/[^/]+$/.test(pageURL)) {
          requestURL = pageURL;
        } else if(self.addToWishListSelectors.gridItemSelector && self.addToWishListSelectors.productLinkSelector) {
          let itemEl = target.closest(self.addToWishListSelectors.gridItemSelector);
          if(itemEl){
            let linkEl = itemEl.querySelector(self.addToWishListSelectors.productLinkSelector);
            if(linkEl){
              let link = linkEl.getAttribute('href').replace(/\?.+/g, '');
              if(link && /\/products\/[^/]+$/.test(link)) requestURL = link;
            }
          }
        }

        if(!requestURL) return;
        fetch(requestURL + '.json').then(r=>r.json()).then(result=>{
          const d = result.product; if(!d) return;
          let item = {
            product_id: d.id, product_title: d.title, variant_id: d.variants[0].id,
            variant_title: (d.variants[0].title !== 'Default Title') ? d.variants[0].title : undefined,
            vendor: d.vendor, total_discount: 0,
            final_price: parseFloat(d.variants[0].price) * 100, product_type: d.product_type,
            quantity: 1, sku: d.variants[0].sku, barcode: d.variants[0].barcode || null
          };
          item = self.enrichItemsWithMeta([item])[0];
          self.ecommerceDataLayer('add_to_wishlist', {items:[item]});
        });
      });
    }

    quickViewData() {
      if(!(this.quickViewSelector.quickViewElement && this.quickViewSelector.gridItemSelector && this.quickViewSelector.productLinkSelector)) return;
      const self=this;
      document.addEventListener('pointerdown', (event)=>{
        let target = event.target;
        if(!target.closest(self.quickViewSelector.quickViewElement)) return;

        let requestURL;
        let itemEl = target.closest(this.quickViewSelector.gridItemSelector);
        if(itemEl){
          let linkEl = itemEl.querySelector(self.quickViewSelector.productLinkSelector);
          if(linkEl){
            let link = linkEl.getAttribute('href').replace(/\?.+/g, '');
            if(link && /\/products\/[^/]+$/.test(link)) requestURL = link;
          }
        }
        if(!requestURL) return;

        fetch(requestURL + '.json').then(r=>r.json()).then(result=>{
          let d = result.product; if(!d) return;
          let item = {
            product_id: d.id, product_title: d.title, variant_id: d.variants[0].id,
            variant_title: (d.variants[0].title !== 'Default Title') ? d.variants[0].title : undefined,
            vendor: d.vendor, total_discount: 0, final_price: parseFloat(d.variants[0].price) * 100,
            product_type: d.product_type, quantity: 1, sku: d.variants[0].sku, barcode: d.variants[0].barcode || null
          };
          item = self.enrichItemsWithMeta([item])[0];
          self.ecommerceDataLayer('view_item', {items:[item]});
          self.quickViewVariants = d.variants;
          self.quickViewedItem  = item;
        });
      });

      {% unless template contains 'product' %}
      if(this.shopifyDirectCheckoutButton.length) {
        let self=this;
        document.addEventListener('pointerdown', (event)=>{
          let btn = event.target.closest(this.shopifyDirectCheckoutButton.join(', '));
          if(!(self.quickViewVariants && self.quickViewedItem && self.quickViewVariants.length && btn)) return;

          let form = btn.closest('form[action*="/cart/add"]'); if(!form) return;
          let quantity = 1;
          let varInput = form.querySelector('input[name="id"]');
          let formId = form.getAttribute('id');
          if(formId){
            let qInput = document.querySelector('input[name="quantity"][form="'+formId+'"]');
            if(qInput) quantity = +qInput.value;
          }
          if(varInput){
            let variant_id = parseInt(varInput.value);
            if(variant_id){
              const v = self.quickViewVariants.find(x => x.id === +variant_id);
              if(v){
                self.quickViewedItem['variant_id']   = variant_id;
                self.quickViewedItem['variant_title']= v.title;
                self.quickViewedItem['final_price']  = parseFloat(v.price) * 100;
                self.quickViewedItem['quantity']     = quantity;
                self.quickViewedItem['barcode']      = v.barcode || self.getBarcodeByVariantId(variant_id) || self.quickViewedItem['barcode'] || null;
                self.ecommerceDataLayer('add_to_cart', {items:[self.quickViewedItem]});
              }
            }
          }
        });
      }
      {% endunless %}
    }

    /* ===== Select item ===== */
    selectItemData() {
      const self = this; const items = this.itemsList;

      {% if template contains 'collection' %}
      document.addEventListener('pointerdown', function(event) {
        const productLink = event.target.closest('a[href*="/products/"]'); if(!productLink) return;
        const linkUrl = productLink.getAttribute('href');
        const matchProduct = (it)=>{
          const s1=(it.url.split('/products/')[1]).split('#')[0].split('?')[0].trim();
          const s2=(linkUrl.split('/products/')[1]).split('#')[0].split('?')[0].trim();
          return s1===s2;
        };
        const item = items.find(matchProduct);
        const index= items.findIndex(matchProduct);
        if(item){
          const enriched = self.enrichItemsWithMeta([{...item, index}])[0];
          self.ecommerceDataLayer('select_item', {items:[enriched]});
        }
      });
      {% endif %}

      document.addEventListener('variant:change', (event)=>{
        const p = event.detail.product, v = event.detail.variant;
        const product_id = p.id, variant_id = v.id, vendor = p.vendor, variant_title = v.public_title;
        const product_title = p.title, final_price = v.price, product_type = p.type, sku = v.sku;
        let barcode = v.barcode || self.getBarcodeByVariantId(variant_id) || null;

        let item = {
          product_id, product_title, variant_id, variant_title, vendor,
          final_price, product_type, quantity:1, sku, barcode
        };
        const enriched = self.enrichItemsWithMeta([item])[0];
        self.ecommerceDataLayer('select_item', {items:[enriched]});
      });
    }

    /* ===== Universal ecommerce DL push ===== */
    ecommerceDataLayer(event, data) {
      const self=this;
      dataLayer.push({ 'ecommerce': null });

      const incomingItems = data && data.items ? this.enrichItemsWithMeta(data.items) : [];

      const dataLayerData = {
        event: this.eventPrefix + event,
        ecommerce: {
          currency: this.cart.currency,
          items: incomingItems.map((item, index) => {
            if(!item.barcode && item.variant_id){
              const bc = this.getBarcodeByVariantId(item.variant_id);
              if(bc) item.barcode = bc;
            }
            const dataLayerItem = {
              index,
              item_id: (item.barcode && String(item.barcode))
                        || (item.sku && String(item.sku))
                        || (item.product_id?.toString?.() || ''),
              product_id: item.product_id?.toString?.(),
              variant_id: item.variant_id?.toString?.(),
              item_group_id: item.product_id?.toString?.(),
              item_name: item.product_title,
              quantity: item.quantity,
              price: +((item.final_price / 100).toFixed(2)),
              discount: item.total_discount ? +((item.total_discount / 100).toFixed(2)) : 0
            };
            if(item.product_type)   dataLayerItem.item_category = item.product_type;
            if(item.vendor)         dataLayerItem.item_brand    = item.vendor;
            if(item.variant_title && item.variant_title !== 'Default Title') dataLayerItem.item_variant = item.variant_title;
            if(item.sku)            dataLayerItem.sku = String(item.sku);
            if(item.barcode)        dataLayerItem.barcode = String(item.barcode);
            if(item.item_list_name) dataLayerItem.item_list_name = item.item_list_name;
            if(item.item_list_id)   dataLayerItem.item_list_id   = item.item_list_id?.toString?.();
            return dataLayerItem;
          })
        },
        client_value: this.customerData.totalSpent,
        client_orders: this.customerData.ordersCount,
        new_customer: this.customerData.ordersCount === 0,
        clv: this.customerData.totalSpent,
        clo: this.customerData.ordersCount,
        google_business_vertical: "retail",
        dynx_pagetype: this.pageType.dynx,
        ecomm_pagetype: this.pageType.ecomm
      };

      if(data.total_price !== undefined) {
        dataLayerData.ecommerce.value = +((data.total_price / 100).toFixed(2));
      } else {
        dataLayerData.ecommerce.value = +(dataLayerData.ecommerce.items.reduce((t, it)=> t + (it.price * it.quantity), 0)).toFixed(2);
      }

      if(data.item_list_id)   dataLayerData.ecommerce.item_list_id   = data.item_list_id;
      if(data.item_list_name) dataLayerData.ecommerce.item_list_name = data.item_list_name;
      if(data.search_term)    dataLayerData.search_term = data.search_term;

      if(self.dataSchema.dynamicRemarketing && self.dataSchema.dynamicRemarketing.show) {
        dataLayer.push({ 'dynamicRemarketing': null });
        dataLayerData['dynamicRemarketing'] = {
          value: dataLayerData.ecommerce.value,
          items: dataLayerData.ecommerce.items.map(item => ({
            id: item.item_id,
            google_business_vertical: self.dataSchema.dynamicRemarketing.business_vertical
          }))
        };
      }

      if(!self.dataSchema.ecommerce || !self.dataSchema.ecommerce.show) {
        delete dataLayerData['ecommerce'];
      }

      dataLayer.push(dataLayerData);
      self.eventConsole(self.eventPrefix + event, dataLayerData);
    }

    /* ===== Forms / clicks / auth ===== */
    formData() {
      const self=this;
      document.addEventListener('submit', function(event) {
        let targetForm = event.target.closest('form[action^="/contact"]'); if(!targetForm) return;
        const formData = {
          form_location: window.location.href,
          form_id: targetForm.getAttribute('id'),
          form_classes: targetForm.getAttribute('class')
        };
        let formType = targetForm.querySelector('input[name="form_type"]');
        let inputs = targetForm.querySelectorAll("input:not([type=hidden]):not([type=submit]), textarea, select");
        inputs.forEach(function(input) {
          var inputName = input.name, inputValue = input.value;
          if (inputName && inputValue) {
            var m = inputName.match(/\[(.*?)\]/);
            if (m && m.length > 1) { formData[m[1]] = input.value; }
          }
        });
        if(formType && formType.value === 'customer') {
          dataLayer.push({ event: self.eventPrefix + 'newsletter_signup', ...formData});
          self.eventConsole(self.eventPrefix + 'newsletter_signup', { event: self.eventPrefix + 'newsletter_signup', ...formData});
        } else if(formType && formType.value === 'contact') {
          dataLayer.push({ event: self.eventPrefix + 'contact_form_submit', ...formData});
          self.eventConsole(self.eventPrefix + 'contact_form_submit', { event: self.eventPrefix + 'contact_form_submit', ...formData});
        }
      });
    }

    phoneClickData() {
      const self=this;
      document.addEventListener('click', function(event) {
        let a = event.target.closest('a[href^="tel:"]'); if(!a) return;
        let phone_number = a.getAttribute('href').replace('tel:', '');
        let payload = { event: self.eventPrefix + 'phone_number_click', page_location: window.location.href, link_classes: a.getAttribute('class'), link_id: a.getAttribute('id'), phone_number };
        dataLayer.push(payload); self.eventConsole(self.eventPrefix + 'phone_number_click', payload);
      });
    }

    emailClickData() {
      const self=this;
      document.addEventListener('click', function(event) {
        let a = event.target.closest('a[href^="mailto:"]'); if(!a) return;
        let email_address = a.getAttribute('href').replace('mailto:', '');
        let payload = { event: self.eventPrefix + 'email_click', page_location: window.location.href, link_classes: a.getAttribute('class'), link_id: a.getAttribute('id'), email_address };
        dataLayer.push(payload); self.eventConsole(self.eventPrefix + 'email_click', payload);
      });
    }

    loginRegisterData() {
      const self=this; let trackedLogin=false, trackedRegister=false;
      if(window.location.href.includes('/account/login')) {
        document.addEventListener('submit', function(e){
          const f = e.target.closest('[action="/account/login"]');
          if(f && !trackedLogin){ trackedLogin=true; const p={event:self.eventPrefix+'login'}; dataLayer.push(p); self.eventConsole(self.eventPrefix+'login', p); }
        });
      }
      if(window.location.href.includes('/account/register')) {
        document.addEventListener('submit', function(e){
          const f = e.target.closest('[action="/account"]');
          if(f && !trackedRegister){ trackedRegister=true; const p={event:self.eventPrefix+'sign_up'}; dataLayer.push(p); self.eventConsole(self.eventPrefix+'sign_up', p); }
        });
      }
    }
  } // end class

  document.addEventListener('DOMContentLoaded', function() {
    try{ window.aepDataLayerInstance = new aep_dataLayer(); }
    catch(error){ console.log(error); }
  });
})();
</script>
